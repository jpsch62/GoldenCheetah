/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.25
 */

#include "sipAPIgoldencheetah.h"

#line 334 "goldencheetah.sip"
//#include "Bindings.h"
#line 12 "./sipgoldencheetahBindings.cpp"

#line 28 "goldencheetah.sip"
#include <qstring.h>
#line 16 "./sipgoldencheetahBindings.cpp"
#line 134 "goldencheetah.sip"
#include <qstringlist.h>
#line 19 "./sipgoldencheetahBindings.cpp"
#line 59 "goldencheetah.sip"
#include "Bindings.h"
#line 22 "./sipgoldencheetahBindings.cpp"
#line 244 "goldencheetah.sip"
#include "Bindings.h"
#line 25 "./sipgoldencheetahBindings.cpp"


extern "C" {static PyObject *meth_Bindings_threadid(PyObject *, PyObject *);}
static PyObject *meth_Bindings_threadid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
            long sipRes;

            sipRes = sipCpp->threadid();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_threadid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_build(PyObject *, PyObject *);}
static PyObject *meth_Bindings_build(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->build();

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_build, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_version(PyObject *, PyObject *);}
static PyObject *meth_Bindings_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_version, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_webpage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_webpage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_url,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->webpage(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_webpage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_result(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_result(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_Bindings, &sipCpp, &a0))
        {
            sipCpp->result(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_result, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_athlete(PyObject *, PyObject *);}
static PyObject *meth_Bindings_athlete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
            PyObject * sipRes;

            sipRes = sipCpp->athlete();

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_athlete, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_athleteZones(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_athleteZones(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0 = 0;
         ::QString a1def = "";
         ::QString* a1 = &a1def;
        int a1State = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_date,
            sipName_sport,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|P0J1", &sipSelf, sipType_Bindings, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->athleteZones(a0,*a1);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_athleteZones, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_activities(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_activities(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString a0def = QString();
         ::QString* a0 = &a0def;
        int a0State = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->activities(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_activities, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_season(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_season(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
        bool a1 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_all,
            sipName_compare,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|bb", &sipSelf, sipType_Bindings, &sipCpp, &a0, &a1))
        {
            PyObject * sipRes;

            sipRes = sipCpp->season(a0,a1);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_season, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seriesPresent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seriesPresent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 10;
        PyObject * a1 = 0;
        int a2 = -1;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_activity,
            sipName_compareindex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|iP0i", &sipSelf, sipType_Bindings, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->seriesPresent(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seriesPresent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seriesName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seriesName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 10;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_Bindings, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->seriesName(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seriesName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seriesLast(PyObject *, PyObject *);}
static PyObject *meth_Bindings_seriesLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->seriesLast();

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seriesLast, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_series(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_series(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 10;
        PyObject * a1 = 0;
        int a2 = -1;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_activity,
            sipName_compareindex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|iP0i", &sipSelf, sipType_Bindings, &sipCpp, &a0, &a1, &a2))
        {
             ::PythonDataSeries*sipRes;

            sipRes = new  ::PythonDataSeries(sipCpp->series(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_PythonDataSeries,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_series, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_activityWbal(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_activityWbal(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0 = 0;
        int a1 = -1;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_activity,
            sipName_compareindex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|P0i", &sipSelf, sipType_Bindings, &sipCpp, &a0, &a1))
        {
             ::PythonDataSeries*sipRes;

            sipRes = new  ::PythonDataSeries(sipCpp->activityWbal(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_PythonDataSeries,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_activityWbal, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_xdata(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_xdata(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::QString a2def = "repeat";
         ::QString* a2 = &a2def;
        int a2State = 0;
        PyObject * a3 = 0;
        int a4 = -1;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_series,
            sipName_join,
            sipName_activity,
            sipName_compareindex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|J1P0i", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4))
        {
             ::PythonDataSeries*sipRes;

            sipRes = new  ::PythonDataSeries(sipCpp->xdata(*a0,*a1,*a2,a3,a4));
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_PythonDataSeries,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_xdata, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_xdataSeries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_xdataSeries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
        PyObject * a2 = 0;
        int a3 = -1;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_series,
            sipName_activity,
            sipName_compareindex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|P0i", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2, &a3))
        {
             ::PythonXDataSeries*sipRes;

            sipRes = new  ::PythonXDataSeries(sipCpp->xdataSeries(*a0,*a1,a2,a3));
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_PythonXDataSeries,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_xdataSeries, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_xdataNames(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_xdataNames(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString a0def = QString();
         ::QString* a0 = &a0def;
        int a0State = 0;
        PyObject * a1 = 0;
        int a2 = -1;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_activity,
            sipName_compareindex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1P0i", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            PyObject * sipRes;

            sipRes = sipCpp->xdataNames(*a0,a1,a2);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_xdataNames, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_activityMetrics(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_activityMetrics(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_compare,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_Bindings, &sipCpp, &a0))
        {
            PyObject * sipRes;

            sipRes = sipCpp->activityMetrics(a0);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_activityMetrics, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seasonMetrics(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seasonMetrics(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::QString a1def = QString();
         ::QString* a1 = &a1def;
        int a1State = 0;
        bool a2 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_all,
            sipName_filter,
            sipName_compare,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|bJ1b", &sipSelf, sipType_Bindings, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            PyObject * sipRes;

            sipRes = sipCpp->seasonMetrics(a0,*a1,a2);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seasonMetrics, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_metrics(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_metrics(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        bool a1 = 0;
         ::QString a2def = QString();
         ::QString* a2 = &a2def;
        int a2State = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_metric,
            sipName_all,
            sipName_filter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|bJ1", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State))
        {
             ::PythonDataSeries*sipRes;

            sipRes = sipCpp->metrics(*a0,a1,*a2);
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a2,sipType_QString,a2State);

            return sipConvertFromType(sipRes,sipType_PythonDataSeries,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_metrics, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seasonPmc(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seasonPmc(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::QString a1def = QString("BikeStress");
         ::QString* a1 = &a1def;
        int a1State = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_all,
            sipName_metric,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|bJ1", &sipSelf, sipType_Bindings, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->seasonPmc(a0,*a1);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seasonPmc, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seasonMeasures(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seasonMeasures(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::QString a1def = QString("Body");
         ::QString* a1 = &a1def;
        int a1State = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_all,
            sipName_group,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|bJ1", &sipSelf, sipType_Bindings, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->seasonMeasures(a0,*a1);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seasonMeasures, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_activityMeanmax(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_activityMeanmax(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_compare,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_Bindings, &sipCpp, &a0))
        {
            PyObject * sipRes;

            sipRes = sipCpp->activityMeanmax(a0);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_activityMeanmax, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seasonMeanmax(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seasonMeanmax(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::QString a1def = QString();
         ::QString* a1 = &a1def;
        int a1State = 0;
        bool a2 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_all,
            sipName_filter,
            sipName_compare,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|bJ1b", &sipSelf, sipType_Bindings, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            PyObject * sipRes;

            sipRes = sipCpp->seasonMeanmax(a0,*a1,a2);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seasonMeanmax, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seasonPeaks(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seasonPeaks(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        bool a2 = 0;
         ::QString a3def = QString();
         ::QString* a3 = &a3def;
        int a3State = 0;
        bool a4 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_series,
            sipName_duration,
            sipName_all,
            sipName_filter,
            sipName_compare,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1i|bJ1b", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, sipType_QString,&a3, &a3State, &a4))
        {
            PyObject * sipRes;

            sipRes = sipCpp->seasonPeaks(*a0,a1,a2,*a3,a4);
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a3,sipType_QString,a3State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seasonPeaks, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_intervalType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_intervalType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_Bindings, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->intervalType(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_intervalType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_seasonIntervals(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_seasonIntervals(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString a0def = QString();
         ::QString* a0 = &a0def;
        int a0State = 0;
        bool a1 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_compare,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1b", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            PyObject * sipRes;

            sipRes = sipCpp->seasonIntervals(*a0,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_seasonIntervals, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_activityIntervals(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_activityIntervals(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString a0def = QString();
         ::QString* a0 = &a0def;
        int a0State = 0;
        PyObject * a1 = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1P0", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            PyObject * sipRes;

            sipRes = sipCpp->activityIntervals(*a0,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_activityIntervals, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_createXDataSeries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_createXDataSeries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::QString* a2;
        int a2State = 0;
        PyObject * a3 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_series,
            sipName_seriesUnit,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1J1|P0", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->createXDataSeries(*a0,*a1,*a2,a3);
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_createXDataSeries, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_deleteActivitySample(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_deleteActivitySample(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;
        PyObject * a1 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|iP0", &sipSelf, sipType_Bindings, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->deleteActivitySample(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_deleteActivitySample, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_deleteSeries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_deleteSeries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        PyObject * a1 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|P0", &sipSelf, sipType_Bindings, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->deleteSeries(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_deleteSeries, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_postProcess(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_postProcess(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        PyObject * a1 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_processor,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|P0", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->postProcess(*a0,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_postProcess, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_setTag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_setTag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
        PyObject * a2 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_value,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|P0", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->setTag(*a0,*a1,a2);
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_setTag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_delTag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_delTag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        PyObject * a1 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|P0", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->delTag(*a0,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_delTag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_hasTag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_hasTag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        PyObject * a1 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|P0", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->hasTag(*a0,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_hasTag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_getTag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_getTag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        PyObject * a1 = 0;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_activity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|P0", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->getTag(*a0,a1));
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_getTag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_configChart(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_configChart(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        bool a2;
        int a3;
        bool a4;
        int a5;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
            sipName_type,
            sipName_animate,
            sipName_legpos,
            sipName_stack,
            sipName_orientation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1ibibi", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, &a3, &a4, &a5))
        {
            bool sipRes;

            sipRes = sipCpp->configChart(*a0,a1,a2,a3,a4,a5);
            sipReleaseType(a0,sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_configChart, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_setCurve(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_setCurve(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        PyObject * a1;
        PyObject * a2;
         ::QStringList* a3;
        int a3State = 0;
         ::QString* a4;
        int a4State = 0;
         ::QString* a5;
        int a5State = 0;
         ::QStringList* a6;
        int a6State = 0;
         ::QStringList* a7;
        int a7State = 0;
        int a8;
        int a9;
        int a10;
         ::QString* a11;
        int a11State = 0;
        int a12;
        bool a13;
        bool a14;
        bool a15;
        bool a16;
        const  ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_xseries,
            sipName_yseries,
            sipName_fseries,
            sipName_xname,
            sipName_yname,
            sipName_labels,
            sipName_colors,
            sipName_line,
            sipName_symbol,
            sipName_symbolsize,
            sipName_color,
            sipName_opacity,
            sipName_opengl,
            sipName_legend,
            sipName_datalabels,
            sipName_fill,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1P0P0J1J1J1J1J1iiiJ1ibbbb", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, sipType_QStringList,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, sipType_QStringList,&a6, &a6State, sipType_QStringList,&a7, &a7State, &a8, &a9, &a10, sipType_QString,&a11, &a11State, &a12, &a13, &a14, &a15, &a16))
        {
            bool sipRes;

            sipRes = sipCpp->setCurve(*a0,a1,a2,*a3,*a4,*a5,*a6,*a7,a8,a9,a10,*a11,a12,a13,a14,a15,a16);
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a3,sipType_QStringList,a3State);
            sipReleaseType(a4,sipType_QString,a4State);
            sipReleaseType(a5,sipType_QString,a5State);
            sipReleaseType(a6,sipType_QStringList,a6State);
            sipReleaseType(a7,sipType_QStringList,a7State);
            sipReleaseType(a11,sipType_QString,a11State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_setCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_configAxis(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_configAxis(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        bool a1;
        int a2;
        double a3;
        double a4;
        int a5;
         ::QString* a6;
        int a6State = 0;
         ::QString* a7;
        int a7State = 0;
        bool a8;
         ::QStringList* a9;
        int a9State = 0;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_visible,
            sipName_align,
            sipName_min,
            sipName_max,
            sipName_type,
            sipName_labelcolor,
            sipName_color,
            sipName_log,
            sipName_categories,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1biddiJ1J1bJ1", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, &a3, &a4, &a5, sipType_QString,&a6, &a6State, sipType_QString,&a7, &a7State, &a8, sipType_QStringList,&a9, &a9State))
        {
            bool sipRes;

            sipRes = sipCpp->configAxis(*a0,a1,a2,a3,a4,a5,*a6,*a7,a8,*a9);
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a6,sipType_QString,a6State);
            sipReleaseType(a7,sipType_QString,a7State);
            sipReleaseType(a9,sipType_QStringList,a9State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_configAxis, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Bindings_addAnnotation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Bindings_addAnnotation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::QString* a2;
        int a2State = 0;
        double a3;
         ::Bindings *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_s1,
            sipName_s2,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1J1d", &sipSelf, sipType_Bindings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->addAnnotation(*a0,*a1,*a2,a3);
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Bindings, sipName_addAnnotation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_Bindings(void *, int);}
static void release_Bindings(void *sipCppV, int)
{
    delete reinterpret_cast< ::Bindings *>(sipCppV);
}


extern "C" {static void *array_Bindings(Py_ssize_t);}
static void *array_Bindings(Py_ssize_t sipNrElem)
{
    return new  ::Bindings[sipNrElem];
}


extern "C" {static void assign_Bindings(void *, SIP_SSIZE_T, void *);}
static void assign_Bindings(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Bindings *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Bindings *>(sipSrc);
}


extern "C" {static void *copy_Bindings(const void *, SIP_SSIZE_T);}
static void *copy_Bindings(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Bindings(reinterpret_cast<const  ::Bindings *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Bindings(sipSimpleWrapper *);}
static void dealloc_Bindings(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Bindings(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Bindings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Bindings(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Bindings *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Bindings();

            return sipCpp;
        }
    }

    {
        const  ::Bindings* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_Bindings, &a0))
        {
            sipCpp = new  ::Bindings(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_Bindings[] = {
    {SIP_MLNAME_CAST(sipName_activities), SIP_MLMETH_CAST(meth_Bindings_activities), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_activityIntervals), SIP_MLMETH_CAST(meth_Bindings_activityIntervals), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_activityMeanmax), SIP_MLMETH_CAST(meth_Bindings_activityMeanmax), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_activityMetrics), SIP_MLMETH_CAST(meth_Bindings_activityMetrics), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_activityWbal), SIP_MLMETH_CAST(meth_Bindings_activityWbal), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_addAnnotation), SIP_MLMETH_CAST(meth_Bindings_addAnnotation), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_athlete), meth_Bindings_athlete, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_athleteZones), SIP_MLMETH_CAST(meth_Bindings_athleteZones), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_build), meth_Bindings_build, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_configAxis), SIP_MLMETH_CAST(meth_Bindings_configAxis), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_configChart), SIP_MLMETH_CAST(meth_Bindings_configChart), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_createXDataSeries), SIP_MLMETH_CAST(meth_Bindings_createXDataSeries), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_delTag), SIP_MLMETH_CAST(meth_Bindings_delTag), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_deleteActivitySample), SIP_MLMETH_CAST(meth_Bindings_deleteActivitySample), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_deleteSeries), SIP_MLMETH_CAST(meth_Bindings_deleteSeries), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getTag), SIP_MLMETH_CAST(meth_Bindings_getTag), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_hasTag), SIP_MLMETH_CAST(meth_Bindings_hasTag), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_intervalType), SIP_MLMETH_CAST(meth_Bindings_intervalType), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_metrics), SIP_MLMETH_CAST(meth_Bindings_metrics), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_postProcess), SIP_MLMETH_CAST(meth_Bindings_postProcess), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_result), SIP_MLMETH_CAST(meth_Bindings_result), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_season), SIP_MLMETH_CAST(meth_Bindings_season), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seasonIntervals), SIP_MLMETH_CAST(meth_Bindings_seasonIntervals), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seasonMeanmax), SIP_MLMETH_CAST(meth_Bindings_seasonMeanmax), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seasonMeasures), SIP_MLMETH_CAST(meth_Bindings_seasonMeasures), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seasonMetrics), SIP_MLMETH_CAST(meth_Bindings_seasonMetrics), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seasonPeaks), SIP_MLMETH_CAST(meth_Bindings_seasonPeaks), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seasonPmc), SIP_MLMETH_CAST(meth_Bindings_seasonPmc), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_series), SIP_MLMETH_CAST(meth_Bindings_series), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seriesLast), meth_Bindings_seriesLast, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seriesName), SIP_MLMETH_CAST(meth_Bindings_seriesName), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_seriesPresent), SIP_MLMETH_CAST(meth_Bindings_seriesPresent), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCurve), SIP_MLMETH_CAST(meth_Bindings_setCurve), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setTag), SIP_MLMETH_CAST(meth_Bindings_setTag), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_threadid), meth_Bindings_threadid, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_version), meth_Bindings_version, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_webpage), SIP_MLMETH_CAST(meth_Bindings_webpage), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xdata), SIP_MLMETH_CAST(meth_Bindings_xdata), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xdataNames), SIP_MLMETH_CAST(meth_Bindings_xdataNames), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xdataSeries), SIP_MLMETH_CAST(meth_Bindings_xdataSeries), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR}
};


sipClassTypeDef sipTypeDef_goldencheetah_Bindings = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_Bindings,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Bindings,
        {0, 0, 1},
        40, methods_Bindings,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_Bindings,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Bindings,
    assign_Bindings,
    array_Bindings,
    copy_Bindings,
    release_Bindings,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
